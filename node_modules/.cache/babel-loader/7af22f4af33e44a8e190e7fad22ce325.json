{"remainingRequest":"/Users/ganxiaohu/vue-test01/node_modules/thread-loader/dist/cjs.js!/Users/ganxiaohu/vue-test01/node_modules/babel-loader/lib/index.js!/Users/ganxiaohu/vue-test01/node_modules/eslint-loader/index.js??ref--13-0!/Users/ganxiaohu/vue-test01/src/mock.js","dependencies":[{"path":"/Users/ganxiaohu/vue-test01/src/mock.js","mtime":1565835389000},{"path":"/Users/ganxiaohu/vue-test01/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ganxiaohu/vue-test01/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ganxiaohu/vue-test01/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ganxiaohu/vue-test01/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"/Users/ganxiaohu/vue-test01/node_modules/@babel/runtime-corejs2/core-js/promise\";\n\nvar getRandomInt = function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n/**\n * 生成mock数据\n * @param  {[int]} startIndex [起始index]\n * @param  {[int]} number     [数据数]\n * @return {[Promise of list of mock]}            [返回mock数据]\n */\n\n\nexport default (function () {\n  var startIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var number = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n  return new _Promise(function (resolve, reject) {\n    setTimeout(function () {\n      var mock = [];\n      var time = new Date();\n\n      for (var id = startIndex; id < number; id++) {\n        mock.push({\n          id: id,\n          time: time,\n          data: getRandomInt(number)\n        });\n      }\n\n      resolve(mock);\n    }, 10);\n  });\n});",{"version":3,"sources":["/Users/ganxiaohu/vue-test01/src/mock.js"],"names":["getRandomInt","max","Math","floor","random","startIndex","number","resolve","reject","setTimeout","mock","time","Date","id","push","data"],"mappings":";;AACA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAS;AAC5B,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAWF,GAAX,CAA3B,CAAP;AACD,CAFD;AAIA;;;;;;;;AAMA,gBAAe,YAAiC;AAAA,MAAhCI,UAAgC,uEAAnB,CAAmB;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;AAC9C,SAAO,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,IAAAA,UAAU,CAAC,YAAM;AACf,UAAMC,IAAI,GAAG,EAAb;AACA,UAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;;AACA,WAAK,IAAIC,EAAE,GAAGR,UAAd,EAA0BQ,EAAE,GAAGP,MAA/B,EAAuCO,EAAE,EAAzC,EAA6C;AAC3CH,QAAAA,IAAI,CAACI,IAAL,CAAU;AACRD,UAAAA,EAAE,EAAFA,EADQ;AAERF,UAAAA,IAAI,EAAJA,IAFQ;AAGRI,UAAAA,IAAI,EAAEf,YAAY,CAACM,MAAD;AAHV,SAAV;AAKD;;AACDC,MAAAA,OAAO,CAACG,IAAD,CAAP;AACD,KAXS,EAWP,EAXO,CAAV;AAYD,GAbM,CAAP;AAcD,CAfD","sourcesContent":["\nconst getRandomInt = (max) => {\n  return Math.floor(Math.random() * Math.floor(max))\n}\n\n/**\n * 生成mock数据\n * @param  {[int]} startIndex [起始index]\n * @param  {[int]} number     [数据数]\n * @return {[Promise of list of mock]}            [返回mock数据]\n */\nexport default (startIndex = 0, number = 20) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const mock = []\n      const time = new Date()\n      for (let id = startIndex; id < number; id++) {\n        mock.push({\n          id,\n          time,\n          data: getRandomInt(number)\n        })\n      }\n      resolve(mock)\n    }, 10)\n  })\n}\n"]}]}